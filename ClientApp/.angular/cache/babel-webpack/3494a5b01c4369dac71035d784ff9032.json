{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let ErrorHandlerService = /*#__PURE__*/(() => {\n  class ErrorHandlerService {\n    constructor(router) {\n      this.router = router;\n\n      this.handleError = error => {\n        if (error.status === 404) {\n          return this.handleNotFound(error);\n        } else if (error.status === 400) {\n          return this.handleBadRequest(error);\n        } else if (error.status === 401) {\n          return this.handleUnauthorized(error);\n        } else if (error.status === 403) {\n          return this.handleForbidden(error);\n        }\n\n        return '';\n      };\n\n      this.handleNotFound = error => {\n        this.router.navigate(['/404']);\n        return error.message;\n      };\n\n      this.handleBadRequest = error => {\n        if (this.router.url === '/authentication/register') {\n          let message = '';\n          const values = Object.values(error.error.errors);\n          values.map(m => {\n            message += m + '<br>';\n          });\n          return message.slice(0, -4);\n        } else {\n          return error.error ? error.error : error.message;\n        }\n      };\n\n      this.handleUnauthorized = error => {\n        // check whether the user is already on the Login page or not\n        if (this.router.url === '/authentication/login') {\n          // return the error message\n          return 'Authentication failed. Wrong Username or Password';\n        } else {\n          // redirect the user to the Login page\n          this.router.navigate(['/authentication/login'], {\n            queryParams: {\n              returnUrl: this.router.url\n            }\n          });\n          return error.message;\n        }\n      };\n\n      this.handleForbidden = error => {\n        this.router.navigate([\"/forbidden\"], {\n          queryParams: {\n            returnUrl: this.router.url\n          }\n        });\n        return \"Forbidden\";\n      };\n    } // intercept the response from the Web API and check if it contains errors\n    //If it does, we are going to check the status code of that error and provide a valid message.\n\n\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        let errorMessage = this.handleError(error);\n        return throwError(errorMessage);\n      }));\n    }\n\n  }\n\n  ErrorHandlerService.ɵfac = function ErrorHandlerService_Factory(t) {\n    return new (t || ErrorHandlerService)(i0.ɵɵinject(i1.Router));\n  };\n\n  ErrorHandlerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlerService,\n    factory: ErrorHandlerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorHandlerService;\n})();","map":null,"metadata":{},"sourceType":"module"}